<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Choco</title>
  
  
  <link href="https://chocolin1226.github.io/atom.xml" rel="self"/>
  
  <link href="https://chocolin1226.github.io/"/>
  <updated>2022-11-24T05:27:15.031Z</updated>
  <id>https://chocolin1226.github.io/</id>
  
  <author>
    <name>Choco</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>添加icon/多對多關聯</title>
    <link href="https://chocolin1226.github.io/2022/11/18/Rails_02/"/>
    <id>https://chocolin1226.github.io/2022/11/18/Rails_02/</id>
    <published>2022-11-18T08:33:15.000Z</published>
    <updated>2022-11-24T05:27:15.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加icon"><a href="#添加icon" class="headerlink" title="添加icon"></a>添加icon</h2><p>下載套件<a href="https://fontawesome.com/docs/apis/javascript/get-started">fontawesome</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add @fortawesome/fontawesome-svg-core</span><br><span class="line">$ yarn add @fortawesome/free-solid-svg-icons</span><br></pre></td></tr></table></figure><h2 id="多對多-關聯"><a href="#多對多-關聯" class="headerlink" title="多對多 關聯"></a>多對多 關聯</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rails g model LikeWishList user:belongs_to wish_list:belongs_to</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">has_many <span class="symbol">:like_wish_lists</span></span><br><span class="line">has_many <span class="symbol">:liked_wish_lists</span>, <span class="symbol">through:</span> <span class="symbol">:like_wish_lists</span>, <span class="symbol">source:</span> <span class="symbol">:wish_list</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">has_many <span class="symbol">:like_wish_lists</span></span><br><span class="line">has_many <span class="symbol">:liked_users</span>, <span class="symbol">through:</span> <span class="symbol">:like_wish_lists</span>, <span class="symbol">source:</span> <span class="symbol">:user</span></span><br></pre></td></tr></table></figure><p><img src="https://railsbook.tw/images/chapter18/many-to-many-tables.png"><br><img src="https://railsbook.tw/images/chapter18/many-to-many-model.png"></p><p>圖片取自<a href="https://railsbook.tw/chapters/18-model-relationship">為你自己學Ruby</a></p>]]></content>
    
    
    <summary type="html">Rails專案</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>路徑/加密/關聯</title>
    <link href="https://chocolin1226.github.io/2022/11/18/Rails_01/"/>
    <id>https://chocolin1226.github.io/2022/11/18/Rails_01/</id>
    <published>2022-11-18T08:33:15.000Z</published>
    <updated>2022-11-24T05:25:23.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="當要建立前台路徑"><a href="#當要建立前台路徑" class="headerlink" title="當要建立前台路徑"></a>當要建立前台路徑</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="symbol">:user</span>, <span class="symbol">as:</span> <span class="string">&quot;users&quot;</span></span><br></pre></td></tr></table></figure><ol><li>可使用resource 會缺少id(不會看到別人的）, index（不會有所有列表）</li><li>resource單數 :user也是單數</li><li>慣例上會去找users_path但我們是用單數去長，所以要再做給他<code>as: &quot;users&quot;</code></li></ol><h2 id="為密碼加密"><a href="#為密碼加密" class="headerlink" title="為密碼加密"></a>為密碼加密</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">encrypt_password</span></span><br><span class="line">    <span class="variable language_">self</span>.password =Digest::<span class="variable constant_">SHA256</span>.digest(<span class="variable language_">self</span>.password)</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="cookie-與-session"><a href="#cookie-與-session" class="headerlink" title="cookie 與 session"></a>cookie 與 session</h2><ol><li>server伺服器 拿的是session</li><li>client瀏覽器（使用者） 拿的是cookie</li><li>類似點餐時會有取單號碼牌</li></ol><h2 id="快速製作使用者（包含登入登出）"><a href="#快速製作使用者（包含登入登出）" class="headerlink" title="快速製作使用者（包含登入登出）"></a>快速製作使用者（包含登入登出）</h2><p>下載套件<br>diveser 或 Sorcery</p><h2 id="建立關聯性"><a href="#建立關聯性" class="headerlink" title="建立關聯性"></a>建立關聯性</h2><p>WishList &lt;-&gt; User</p><ol><li>在User.rb &#x3D;&gt; <code>has_many: wish_lists</code></li><li>在WishLst.rb &#x3D;&gt; <code>belongs_to :user</code></li></ol><ul><li>可以單獨存在，有查詢需求才需要添加。</li></ul>]]></content>
    
    
    <summary type="html">Rails專案</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>find/ find_by/ find_by！/ where</title>
    <link href="https://chocolin1226.github.io/2022/11/17/RoR_07/"/>
    <id>https://chocolin1226.github.io/2022/11/17/RoR_07/</id>
    <published>2022-11-17T08:33:15.000Z</published>
    <updated>2022-11-24T05:21:46.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="find-x2F-find-by-x2F-find-by！-x2F-where"><a href="#find-x2F-find-by-x2F-find-by！-x2F-where" class="headerlink" title=".find&#x2F; find_by&#x2F; find_by！&#x2F; where"></a>.find&#x2F; find_by&#x2F; find_by！&#x2F; where</h2><table><thead><tr><th>.find(id)</th><th>find_by(key: value)</th><th>find_by！(key: value)</th><th>where(key: value)</th></tr></thead><tbody><tr><td>找不到會噴訊息 (ActvieRecord::RecordNotFound)</td><td>找不到噴nil</td><td>找不到會噴訊息 (ActvieRecord::RecordNotFound)</td><td>找不到回傳空陣列[]</td></tr><tr><td>只會撈一筆資料 回傳都是單一元素</td><td>只會撈一筆資料 回傳都是單一元素</td><td>只會撈一筆資料 回傳都是單一元素</td><td>拿到的是陣列 一次找多筆資料</td></tr></tbody></table><h2 id="將顯示的內文自動換行"><a href="#將顯示的內文自動換行" class="headerlink" title="將顯示的內文自動換行"></a>將顯示的內文自動換行</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= simple_format(<span class="variable">@wish_list</span>.description) %&gt;</span><br></pre></td></tr></table></figure><h2 id="UJS-x3D-Unobtrusive-JavaScript"><a href="#UJS-x3D-Unobtrusive-JavaScript" class="headerlink" title="UJS &#x3D; Unobtrusive JavaScript"></a>UJS &#x3D; Unobtrusive JavaScript</h2><p>非侵入式JS<br>目的是為了不要在html內放JS語法。</p><h2 id="form-with-x2F-form-for-x2F-form-tag"><a href="#form-with-x2F-form-for-x2F-form-tag" class="headerlink" title="form_with &#x2F; form_for &#x2F; form_tag"></a>form_with &#x2F; form_for &#x2F; form_tag</h2><table><thead><tr><th>form_with(Hash)</th><th>form_for(model)</th><th>form_tag(url)</th></tr></thead><tbody><tr><td>會依據內容判斷是 form_for 或 form_tag ，但比form_for少了class和id屬性，可自行加</td><td>不能是nil</td><td>網址</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Ruby on Rails</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ruby on Rails-1115</title>
    <link href="https://chocolin1226.github.io/2022/11/15/RoR_06/"/>
    <id>https://chocolin1226.github.io/2022/11/15/RoR_06/</id>
    <published>2022-11-15T08:33:15.000Z</published>
    <updated>2022-11-24T05:19:57.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS暫存問題"><a href="#JS暫存問題" class="headerlink" title="JS暫存問題"></a>JS暫存問題</h2><h3 id="早期"><a href="#早期" class="headerlink" title="早期"></a>早期</h3><p>利用查詢字串的方式，每秒換新的數字，告訴瀏覽器這是不同的檔</p><h3 id="後期"><a href="#後期" class="headerlink" title="後期"></a>後期</h3><p>利用打包工具產生代碼，會去判斷，如果內容一樣，代碼不變，會有暫存效果，內容有改則換另一個代碼。</p><h2 id="沒認證錯誤-Action-Controller-InvalidAuthenticity-Token"><a href="#沒認證錯誤-Action-Controller-InvalidAuthenticity-Token" class="headerlink" title="沒認證錯誤 Action Controller::InvalidAuthenticity Token"></a>沒認證錯誤 Action Controller::InvalidAuthenticity Token</h2><p>當表單寫入時會擋，為了防止有人亂傳的機制</p><p>解法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot;&gt;</span><br></pre></td></tr></table></figure><p>或是推薦以下form_for寫法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= form_for <span class="variable">@wish_list</span>, <span class="symbol">url:</span> <span class="string">&quot;/create_wish&quot;</span> <span class="keyword">do</span> |<span class="params">f</span>| %&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;%= f.label <span class="symbol">:title</span> %&gt;</span><br><span class="line">    &lt;%= f.text_field <span class="symbol">:title</span> %&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;%= f.label :description %&gt;</span></span><br><span class="line"><span class="regexp">    &lt;%= f.text_area :description %&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/div</span>&gt;</span><br><span class="line">  &lt;%= f.submit %&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure><h2 id="沒清洗錯誤-Active-Model-ForbiddenAttributesError"><a href="#沒清洗錯誤-Active-Model-ForbiddenAttributesError" class="headerlink" title="沒清洗錯誤 Active Model::ForbiddenAttributesError"></a>沒清洗錯誤 Active Model::ForbiddenAttributesError</h2><p>當整包資料寫入時會擋，為了防止有人亂傳的機制</p><p>解法，清洗動作：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clean_params = params.<span class="keyword">require</span>(<span class="symbol">:wish_list</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:description</span>)  </span><br><span class="line"></span><br><span class="line"><span class="variable">@wish_list</span> = <span class="title class_">WishList</span>.new(clean_params)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Ruby on Rails</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ruby on Rails-1114</title>
    <link href="https://chocolin1226.github.io/2022/11/14/RoR_05/"/>
    <id>https://chocolin1226.github.io/2022/11/14/RoR_05/</id>
    <published>2022-11-14T08:33:15.000Z</published>
    <updated>2022-11-24T05:18:05.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Rack-架子"><a href="#Rack-架子" class="headerlink" title="Rack(架子)"></a>Rack(架子)</h2><h3 id="規格："><a href="#規格：" class="headerlink" title="規格："></a>規格：</h3><p>回應call方法,回傳一個陣列，包含：</p><ol><li>http狀態(200成功，301永久&#x2F;302暫時 轉移位置，401 需要輸入帳密，403 需要授權，404使用者的瀏覽器找錯地方，500內部伺服器問題)</li><li>header頁面(hash)，告訴伺服器要用什麼方式渲染</li><li>body內文</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="number">200</span>,</span><br><span class="line">    &#123;<span class="string">&quot;content-Type&quot;</span> =&gt; <span class="string">&quot;text/html&quot;</span>&#125;,</span><br><span class="line">    [<span class="string">&quot;內文&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rackup"><a href="#rackup" class="headerlink" title="rackup"></a>rackup</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">env</span>)</span><br><span class="line">    [</span><br><span class="line">      <span class="number">200</span>,</span><br><span class="line">      &#123;<span class="string">&quot;content-type&quot;</span> =&gt; <span class="string">&quot;text/html&quot;</span>&#125;, </span><br><span class="line">      [<span class="string">&quot;hello world&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">kitty= Cat.new</span><br><span class="line"></span><br><span class="line">run kitty</span><br></pre></td></tr></table></figure><h2 id="rails-網頁建置步驟"><a href="#rails-網頁建置步驟" class="headerlink" title="rails 網頁建置步驟"></a>rails 網頁建置步驟</h2><p><strong>快捷鍵control+p可快速找到需要檔案</strong></p><h3 id="routes-rb（路徑）"><a href="#routes-rb（路徑）" class="headerlink" title="routes.rb（路徑）"></a>routes.rb（路徑）</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get <span class="string">&quot;/about&quot;</span>, <span class="symbol">to:</span> <span class="string">&quot;pages#about&quot;</span></span><br></pre></td></tr></table></figure><h3 id="（終端機）"><a href="#（終端機）" class="headerlink" title="$（終端機）"></a>$（終端機）</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>rails g controller pages</span><br></pre></td></tr></table></figure><h3 id="pages-controller-rb（中控台）"><a href="#pages-controller-rb（中控台）" class="headerlink" title="pages_controller.rb（中控台）"></a>pages_controller.rb（中控台）</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">about</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="about-html-erb（畫面）"><a href="#about-html-erb（畫面）" class="headerlink" title="about.html.erb（畫面）"></a>about.html.erb（畫面）</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;關於我們&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure><h3 id="超連結寫法"><a href="#超連結寫法" class="headerlink" title="超連結寫法"></a>超連結寫法</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;/about&quot;</span>&gt;關於&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;%= link_to &quot;關於&quot;, &quot;/about</span><span class="string">&quot; %&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;%= link_to &quot;</span>關於<span class="string">&quot;, about_path %&gt; #相對路徑</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;%= link_to &quot;</span>關於<span class="string">&quot;, about_url %&gt; #絕對路徑</span></span><br></pre></td></tr></table></figure><h3 id="新增欄位"><a href="#新增欄位" class="headerlink" title="新增欄位"></a>新增欄位</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rails g migration add_online_to_wish_list</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_column :wish_lists, :online, :boolean, default: false</span><br></pre></td></tr></table></figure><p><strong>記得存檔</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rails db:migrate</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Ruby on Rails</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ruby on Rails-1111</title>
    <link href="https://chocolin1226.github.io/2022/11/11/RoR_04/"/>
    <id>https://chocolin1226.github.io/2022/11/11/RoR_04/</id>
    <published>2022-11-11T08:33:15.000Z</published>
    <updated>2022-11-24T05:17:45.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ruby-唯二不是物件"><a href="#Ruby-唯二不是物件" class="headerlink" title="Ruby 唯二不是物件?"></a>Ruby 唯二不是物件?</h2><p>method , block</p><h2 id="類別繼承使用時機"><a href="#類別繼承使用時機" class="headerlink" title="類別繼承使用時機"></a>類別繼承使用時機</h2><p>因為類別多了繼承的能力，<br>如果彼此間是有關連的，<br>甚至是要有另一類別內的所有能力，<br>可以考慮使用類別繼承。</p><p>例如我們產生一個動物類別會動、能吃東西，<br>然後我們要產生一樣會動、能吃東西的魚類別、鳥類別、狗類別，<br>我們就可以讓這三個類別都繼承動物類別，<br>這樣這三個類別所有實體都會動、能吃東西。</p><h2 id="initialize-初始化"><a href="#initialize-初始化" class="headerlink" title="initialize(初始化)"></a>initialize(初始化)</h2><ul><li>只要一出生就會執行（new實體時一並執行）</li><li>initialize 多練習打～有四個i，打錯就沒有了</li><li>初始化行為又稱建構或建構子</li><li>ＪＳ也有類似行為：constructor</li></ul><h2 id="superclass-超類別-x2F-父類別"><a href="#superclass-超類別-x2F-父類別" class="headerlink" title="superclass(超類別&#x2F;父類別)"></a>superclass(超類別&#x2F;父類別)</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">clss Animal</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p Animal.superclass  <span class="comment">#Object</span></span><br><span class="line"></span><br><span class="line">p Class.superclass   <span class="comment">#Module</span></span><br><span class="line">p Module.superclass  <span class="comment">#Object</span></span><br><span class="line">p Object.superclass  <span class="comment">#BasicObject</span></span><br><span class="line">p BasicObject.superclass  <span class="comment">#nil</span></span><br></pre></td></tr></table></figure><h2 id="實體與實體變數"><a href="#實體與實體變數" class="headerlink" title="實體與實體變數"></a>實體與實體變數</h2><p>實體是一種實體(位置)、也是一種變數。<br>實體變數是一種實體變數、也是一種變數，只活在實體方法內。</p><h2 id="RB沒有屬性只有方法-可以使用以下方式"><a href="#RB沒有屬性只有方法-可以使用以下方式" class="headerlink" title="RB沒有屬性只有方法,可以使用以下方式"></a>RB沒有屬性只有方法,可以使用以下方式</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">attr_accessor</span> <span class="symbol">:age</span> <span class="comment">#可讀可寫</span></span><br><span class="line"><span class="keyword">attr_reader</span> <span class="symbol">:age</span>  <span class="comment">#可讀</span></span><br><span class="line"><span class="keyword">attr_writer</span> <span class="symbol">:age</span>  <span class="comment">#可寫</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="單體（例）方法-x3D-gt-類別方法-v-s-實體方法"><a href="#單體（例）方法-x3D-gt-類別方法-v-s-實體方法" class="headerlink" title="單體（例）方法 &#x3D;&gt; 類別方法 v.s 實體方法"></a>單體（例）方法 &#x3D;&gt; 類別方法 v.s 實體方法</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">kitty</span>.hi <span class="comment">#單體（例）方法</span></span><br><span class="line">  p <span class="string">&quot;hi&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">self</span>.hi  <span class="comment">#類別方法</span></span><br><span class="line">    p <span class="string">&quot;hi&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">haha</span>     <span class="comment">#實體方法</span></span><br><span class="line">    p <span class="string">&quot;haha&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Cat.hi <span class="comment">#類別方法</span></span><br><span class="line"></span><br><span class="line">kitty = <span class="title class_">Cat</span>.new  <span class="comment">#類別方法</span></span><br><span class="line">kitty.hi <span class="comment">#單體（例）方法</span></span><br><span class="line">kitty.haha  <span class="comment">#實體方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要使用實體方法時，new出實體再使用實體方法</p><h2 id="類別變數使用方式"><a href="#類別變數使用方式" class="headerlink" title="類別變數使用方式"></a>類別變數使用方式</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">  <span class="variable">@@count</span> = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initialize</span></span><br><span class="line">    <span class="variable">@@count</span> += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">self</span>.total</span><br><span class="line">    <span class="variable">@@count</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="public-公用的"><a href="#public-公用的" class="headerlink" title="public(公用的)"></a>public(公用的)</h2><p>系統預設定義是public,<br>是一種開放的、誰都可以存取的方式。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span></span><br><span class="line">    puts <span class="string">&quot;eating...&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">kitty = Cat.new</span><br><span class="line">kitty.eat  <span class="comment">#eating...</span></span><br></pre></td></tr></table></figure><p>像這樣，kitty可以直接提取eat這個方法。</p><h2 id="Protected-受保護的"><a href="#Protected-受保護的" class="headerlink" title="Protected(受保護的)"></a>Protected(受保護的)</h2><p>較public不自由，<br>不可以直接存取，</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">  protected</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span></span><br><span class="line">    puts <span class="string">&quot;eating...&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">kitty = Cat.new</span><br><span class="line">kitty.eat  <span class="comment">#錯誤訊息</span></span><br></pre></td></tr></table></figure><p>但不限定有沒有明確的接收者，<br>所以用以下兩個方法都可以成功執行。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">do_eat</span></span><br><span class="line">    eat           <span class="comment">#沒有接收者</span></span><br><span class="line">    <span class="variable language_">self</span>.eat      <span class="comment">#有接收者</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  protected</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span></span><br><span class="line">    puts <span class="string">&quot;eating...&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">kitty = Cat.new</span><br><span class="line">kitty.do_eat </span><br></pre></td></tr></table></figure><h2 id="Private-私人的"><a href="#Private-私人的" class="headerlink" title="Private(私人的)"></a>Private(私人的)</h2><p>相對於public，<br>不可以直接存取，</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">  private</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span></span><br><span class="line">    puts <span class="string">&quot;eating...&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">kitty = Cat.new</span><br><span class="line">kitty.eat  <span class="comment">#錯誤訊息</span></span><br></pre></td></tr></table></figure><p>也不能有明確的接收者，<br>因此在呼叫方法時不能有.小數點</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">do_eat</span></span><br><span class="line">    eat           <span class="comment">#沒有接收者,但是在ruby3版本後可寫成self.eat</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  private</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span></span><br><span class="line">    puts <span class="string">&quot;eating...&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">kitty = Cat.new</span><br><span class="line">kitty.do_eat </span><br></pre></td></tr></table></figure><p>不過在ruby的世界裡，<br>還可以用send方法來呼叫成功喔！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">  private</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span></span><br><span class="line">    puts <span class="string">&quot;eating...&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">kitty = Cat.new</span><br><span class="line">kitty.send(<span class="symbol">:eat</span>) <span class="comment">#動態執行</span></span><br></pre></td></tr></table></figure><h2 id="所有的-class都是Class"><a href="#所有的-class都是Class" class="headerlink" title="所有的.class都是Class"></a>所有的.class都是Class</h2><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kitty = A::B::Cat.new</span><br></pre></td></tr></table></figure><p>代表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module(或class) A</span><br><span class="line">  module(或class) B</span><br><span class="line">    class Cat</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Ruby on Rails</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ruby on Rails-MCV的Model</title>
    <link href="https://chocolin1226.github.io/2022/11/08/RoR_03/"/>
    <id>https://chocolin1226.github.io/2022/11/08/RoR_03/</id>
    <published>2022-11-08T08:33:15.000Z</published>
    <updated>2022-11-16T18:10:28.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-Model"><a href="#What-is-Model" class="headerlink" title="What is Model?"></a>What is Model?</h2><p>模組，將鬆散的資料表達成有意義的資訊。</p><h2 id="How-to-Modeling-建模"><a href="#How-to-Modeling-建模" class="headerlink" title="How to Modeling(建模)?"></a>How to Modeling(建模)?</h2><p>將眾多Data合成(composite)抽象的Value Object</p><p>將眾多Value合成實體(Entity：有id,獨一無二,狀態可改)</p><p>Entity有事件發生時會改變什麼狀態</p>]]></content>
    
    
    <summary type="html">Ruby on Rails</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ruby on Rails-Ruby 複習</title>
    <link href="https://chocolin1226.github.io/2022/11/07/RoR_02/"/>
    <id>https://chocolin1226.github.io/2022/11/07/RoR_02/</id>
    <published>2022-11-07T08:33:15.000Z</published>
    <updated>2022-11-16T18:10:18.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="符號v-s-字串"><a href="#符號v-s-字串" class="headerlink" title="符號v.s.字串"></a>符號v.s.字串</h2><p>符號：有名字的物件，是一種值</p><h3 id="1-symbol的內容不能改變"><a href="#1-symbol的內容不能改變" class="headerlink" title="1. symbol的內容不能改變"></a>1. symbol的內容不能改變</h3><p>  字串想要改其中一個字是可以的，但符號不行。<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;abcd&quot;[0] = &quot;z&quot;    #字串變成&quot;zbcd&quot;</span><br><span class="line">:abcd[0] = &quot;z&quot;     #錯誤訊息</span><br></pre></td></tr></table></figure></p><h3 id="2-symbol指到同一個記憶體位置（編號）"><a href="#2-symbol指到同一個記憶體位置（編號）" class="headerlink" title="2. symbol指到同一個記憶體位置（編號）"></a>2. symbol指到同一個記憶體位置（編號）</h3><p>  字串每次的記憶體位置是不固定的，而符號是同一個記憶體位置。<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5.times do</span><br><span class="line">  puts &quot;abcd&quot;.object_id</span><br><span class="line">end</span><br></pre></td></tr></table></figure><br>   結果分別是：720 740 760 780 800<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5.times do</span><br><span class="line">  puts :abcd.object_id</span><br><span class="line">end</span><br></pre></td></tr></table></figure><br>   結果都是：1920348</p><p>   *每個人電腦的記憶體位置顯示都會有差異喔！<br>   我的例子是用Replit執行的結果。</p><p>   *補充：所有數字的位置都是奇數，其他放偶數。</p><h3 id="3-symbol的效能比較好"><a href="#3-symbol的效能比較好" class="headerlink" title="3. symbol的效能比較好"></a>3. symbol的效能比較好</h3><p>   程式在比較符號是否相同時，<br>   是直接比對這物件的object_id是否相同，<br>   但在比較字串時，<br>   它是一個一個字母比對，<br>   因此比較的時間會隨著字母的數量而增加。</p><p>   *補充：但因為字串位置是暫存，長期來說，不會佔記憶體位置。</p><h2 id="hash-v-s-陣列"><a href="#hash-v-s-陣列" class="headerlink" title="hash v.s 陣列"></a>hash v.s 陣列</h2><ol><li>結構不同</li><li>存取方式不同</li><li>沒有順序</li></ol><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [1, 2, 3, 1, 2, 1, 3, 1, 2, 3, 4, 5, 6]</span><br><span class="line">#請計算在陣列 a 中，每個數字出現的次數。</span><br><span class="line"></span><br><span class="line">p a.tally</span><br></pre></td></tr></table></figure><h2 id="ruby的省略"><a href="#ruby的省略" class="headerlink" title="ruby的省略"></a>ruby的省略</h2><p>為了更像人在講話</p><p>可「<strong>適時</strong>」省略（）{} return(最後一行的執行結果)</p><h3 id="回傳值意義？"><a href="#回傳值意義？" class="headerlink" title="回傳值意義？"></a>回傳值意義？</h3><p>為了交回控制權</p><h3 id="與"><a href="#與" class="headerlink" title="?與!"></a>?與!</h3><ol><li>放在物件後面</li><li>?不成文默契：回傳true 或 false</li><li>!不成文默契：有你意想不到的結果，要注意</li></ol><h2 id="Rakefile"><a href="#Rakefile" class="headerlink" title="Rakefile"></a>Rakefile</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">desc &quot;這是測試&quot; #描述</span><br><span class="line"></span><br><span class="line">task :hi do</span><br><span class="line">    puts &quot;hello world&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">desc &quot;hey123&quot;</span><br><span class="line">task :hey =&gt; :hi do #相依性</span><br><span class="line">    puts &quot;hey!!&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#初始</span><br><span class="line">task :default =&gt; :hi </span><br></pre></td></tr></table></figure><h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><p>不會主動執行的程式區塊，無法單獨存活。</p><h2 id="題目-1"><a href="#題目-1" class="headerlink" title="題目"></a>題目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def my_map(arr)</span><br><span class="line">  result = []</span><br><span class="line">  arr.each &#123; |x| result &lt;&lt;( yield x) &#125;</span><br><span class="line">  result</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">list = [1, 2, 3, 4, 5]</span><br><span class="line">result = my_map(list) &#123; |x| x * 2 &#125;</span><br><span class="line"></span><br><span class="line">p result # [2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def my_filter(arr)</span><br><span class="line">  result = []</span><br><span class="line">  arr.each &#123; |x| result &lt;&lt; x if yield x &#125;</span><br><span class="line">  result</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">list = [1, 2, 3, 4, 5]</span><br><span class="line">result = my_filter(list) &#123; |x| x &gt; 2 &#125;</span><br><span class="line"></span><br><span class="line">p result # [3, 4, 5]</span><br></pre></td></tr></table></figure><h2 id="有一些方法可以使block物件化："><a href="#有一些方法可以使block物件化：" class="headerlink" title="有一些方法可以使block物件化："></a>有一些方法可以使block物件化：</h2><h3 id="Proc"><a href="#Proc" class="headerlink" title="Proc"></a>Proc</h3><p>使用 Proc 類別把 Block 物件化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say_hello_to = Proc.new &#123; |name| puts &quot;hi #&#123;name&#125;&quot;&#125;  </span><br></pre></td></tr></table></figure><p>呼叫Proc 方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">say_hello_to.call(&quot;小花&quot;)    # .call</span><br><span class="line">say_hello_to.(&quot;小花&quot;)        # .小括號</span><br><span class="line">say_hello_to[&quot;小花&quot;]         # 中括號</span><br><span class="line">say_hello_to === &quot;小花&quot;      # 三個等號</span><br><span class="line">say_hello_to.yield &quot;小花&quot;    # .yield</span><br></pre></td></tr></table></figure><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p>Proc 類別下，還有一個lambda可以把 Block 物件化，<br>但又有些許不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say_hello_to = lambda &#123; |name| puts &quot;hi #&#123;name&#125;&quot;&#125; </span><br></pre></td></tr></table></figure><p>或是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say_hello_to = -&gt;(name) &#123; puts &quot;hi #&#123;name&#125;&quot;&#125; </span><br></pre></td></tr></table></figure><p>這兩種方式都可以把 Block 物件化，<br>呼叫方式和Proc 相同，<br>不過執行上會有些許不同</p><hr>]]></content>
    
    
    <summary type="html">Ruby on Rails</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ruby on Rails-New Rails</title>
    <link href="https://chocolin1226.github.io/2022/11/06/RoR_01/"/>
    <id>https://chocolin1226.github.io/2022/11/06/RoR_01/</id>
    <published>2022-11-06T08:33:15.000Z</published>
    <updated>2022-11-16T18:10:06.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="為什麼使用變數？"><a href="#為什麼使用變數？" class="headerlink" title="為什麼使用變數？"></a>為什麼使用變數？</h2><p>賦予值意義。</p><h2 id="REPL-為何使用？"><a href="#REPL-為何使用？" class="headerlink" title="REPL?為何使用？"></a>REPL?為何使用？</h2><p>即時讀寫無窮迴圈，方便測試一些短方法。</p><h2 id="常數與變數有何不同？為何如此設計？"><a href="#常數與變數有何不同？為何如此設計？" class="headerlink" title="常數與變數有何不同？為何如此設計？"></a>常數與變數有何不同？為何如此設計？</h2><p>常數大寫開頭。<br>其他語言常數不可改，ruby可以改，只是會跳警告。</p><p>因為ruby的類別是用常數命名，<br>類別會需要擴充功能，<br>如果常數不能改就無法擴充。</p><h2 id="if倒裝？使用時機？相反詞？慣用寫法？"><a href="#if倒裝？使用時機？相反詞？慣用寫法？" class="headerlink" title="if倒裝？使用時機？相反詞？慣用寫法？"></a>if倒裝？使用時機？相反詞？慣用寫法？</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">&quot;在家&quot;</span> <span class="keyword">if</span> weather == <span class="string">&quot;下雨&quot;</span> </span><br></pre></td></tr></table></figure><p><strong>使用時機：</strong><br>如果可以一句寫完，<br>或為了強調結果。</p><p><strong>相反詞：</strong>（不推薦使用）<br><code>unless</code> 或是 <code>if not</code></p><p><strong>慣用寫法：</strong></p><ol><li>正向表述為主</li><li>盡量不用寫<code>else</code></li><li>注意可讀性</li></ol><h2 id="例外處理？"><a href="#例外處理？" class="headerlink" title="例外處理？"></a>例外處理？</h2><ul><li>讓方法專心在輸入值與輸出值的關係，判斷錯誤可以另外判斷。</li></ul><h2 id="為何要迴圈？"><a href="#為何要迴圈？" class="headerlink" title="為何要迴圈？"></a>為何要迴圈？</h2><p>處理重複的事</p>]]></content>
    
    
    <summary type="html">Ruby on Rails</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript-物件導向 第6堂</title>
    <link href="https://chocolin1226.github.io/2022/11/05/JS_03/"/>
    <id>https://chocolin1226.github.io/2022/11/05/JS_03/</id>
    <published>2022-11-05T08:33:15.000Z</published>
    <updated>2022-11-16T18:09:58.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="addEventlistner的-“click”事件-運作方式"><a href="#addEventlistner的-“click”事件-運作方式" class="headerlink" title="addEventlistner的 “click”事件 運作方式"></a>addEventlistner的 “click”事件 運作方式</h2><p><strong>Capturing → Targeting → Bubbling</strong></p><ol><li>target ： 事件流最後Ｕturn 回來碰到的對象</li><li>currenttarget : 事件流註冊的對象就是currenttarget</li></ol><p><img src="https://i.imgur.com/gzrsJyh.png"></p><p>預設事件發生在冒泡階段(Bubbling)，先回傳B再回傳A；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addEventlistner(&quot;click&quot;,()=&gt;&#123;&#125;,false)</span><br></pre></td></tr></table></figure><p>如果改成true，會在捕獲階段(Capturing)就執行，先回傳A再回傳B。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addEventlistner(&quot;click&quot;,()=&gt;&#123;&#125;,true)</span><br></pre></td></tr></table></figure><p>一次只能選一條路走</p><p>若是想讓事件停止傳播 可使用StopPropagation</p><p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p><h2 id="Scope-可視範圍-注意var、let、const的scope範圍"><a href="#Scope-可視範圍-注意var、let、const的scope範圍" class="headerlink" title="Scope(可視範圍): 注意var、let、const的scope範圍"></a>Scope(可視範圍): 注意var、let、const的scope範圍</h2><p>1.Scope chain(範圍鏈): 當前範圍找不到就會往外面找，只有JavaScript、Python才有</p><p>2.lexical scope(詞彙範圍)：scope跟它寫在「哪裡」有關！！！<br>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝<br><strong>每一個物件都有一種屬性__proto__</strong><br> <strong>如果沒有我們要找的屬性，先從自己開始找，然後從自己的proto往其他的物件尋找。直到找到有為止 or 沒有找到&#x3D;&gt;(回傳undifined)</strong></p><p><strong>每個function都有prototype屬性，除了箭頭函式 &#x3D;&gt;{ }。</strong><br>且prototype預設是空白物件{ }</p><p>❋ 另外需要注意ASI &#x3D; Auto Semicolon Insertion，自動加上分號;<br>這個機制，<br>如果return (<br>    要回傳的內容<br>)。<br>這樣就可以正確執行。return 沒有用()的話，會出現錯誤。</p><p><a href="https://github.com/lydiahallie/javascript-questions">lydia小測驗 關鍵字:prototype</a><br>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p><h2 id="this-百變怪（歡迎大家踴躍矯正，補充舉個例＾＾）"><a href="#this-百變怪（歡迎大家踴躍矯正，補充舉個例＾＾）" class="headerlink" title="this 百變怪（歡迎大家踴躍矯正，補充舉個例＾＾）"></a>this 百變怪（歡迎大家踴躍矯正，補充舉個例＾＾）</h2><ol><li>誰呼叫就是指向誰</li><li>如果自己沒人呼叫他，就是自己本身，全域物件，沒有呼叫主詞都是全域。</li><li>箭頭函示沒有自己得this，所以自己會指向全域物件</li><li>新增物件是否有用new，有new會轉向當前function裡的this&#x3D;&gt;{}，若函數本身若不用new丟入引數，會使this會指向全域，呼叫函數會undefine</li><li>用call,apply,bind會強迫去取分，也就是會強迫引用當前輸入數值，並不會指向呼叫本人內的數值</li></ol><h2 id="array-prototype-funtion"><a href="#array-prototype-funtion" class="headerlink" title="array.prototype.funtion()"></a>array.prototype.funtion()</h2><ol><li>函數是物件的一等公民，他有物件__proto__屬性和本身的prototype屬性，</li><li>所有物件都有__proto__ 屬性會把相關物件串起來，形成鏈的連結，順著源頭一層一層往裡找</li><li>new會把後方函數的串連起來，通過prototype會連結至函數本身，呼叫的原型this去建立，而this此時會指向被呼叫原型的函數本身</li></ol>]]></content>
    
    
    <summary type="html">JavaScript</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript-by value/by reference給值/給址</title>
    <link href="https://chocolin1226.github.io/2022/11/04/JS_02/"/>
    <id>https://chocolin1226.github.io/2022/11/04/JS_02/</id>
    <published>2022-11-04T08:33:15.000Z</published>
    <updated>2022-11-16T18:09:51.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="by-value"><a href="#by-value" class="headerlink" title="by value:"></a>by value:</h2><p><strong>一般原始型別（primitive type：Boolean, String, Number, null, undefined）只是給值，不影響原本址的內容。</strong><br>let a &#x3D; 1;<br>let b &#x3D; a;<br>b &#x3D; 2<br>console.log(a);<br>&#x3D;&gt;1</p><h2 id="by-reference"><a href="#by-reference" class="headerlink" title="by reference:"></a>by reference:</h2><p><strong>物件型別（Objects type：Object, Array, Function）是給址，因此會影響原本址的內容。</strong><br>let a &#x3D;[1];<br>let b &#x3D; a;<br>b[0] &#x3D; 2<br>console.log(a);<br>&#x3D;&gt;[2]</p><p>要注意的是<br>let a &#x3D;[1];<br>let b &#x3D; a;<br>b&#x3D; [2]<br>console.log(a);<br>&#x3D;&gt;[1]</p><p>看得出差別嗎？<br>下面的例子b&#x3D;[2]是重新給b一個新的址（新的陣列），<br>因此不會影響原本a的址的內容。</p>]]></content>
    
    
    <summary type="html">JavaScript</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript-找陣列內元素方法比較 find, findIndex, indexOf, lastIndexOf</title>
    <link href="https://chocolin1226.github.io/2022/11/03/JS_01/"/>
    <id>https://chocolin1226.github.io/2022/11/03/JS_01/</id>
    <published>2022-11-03T08:33:15.000Z</published>
    <updated>2022-11-16T18:09:42.268Z</updated>
    
    <content type="html"><![CDATA[<p><strong>共同：</strong><br><strong>都只會找到一個符合的元素就結束。</strong></p><h2 id="find-v-s-findIndex"><a href="#find-v-s-findIndex" class="headerlink" title="find v.s. findIndex"></a>find v.s. findIndex</h2><p><strong>共同：</strong><br>搜尋條件可放函式</p><p><strong>差異：</strong><br>find返回元素名稱</p><p>findIndex返回元素索引值（元素在陣列第幾個位置）</p><h2 id="indexOf-v-s-lastIndexOf"><a href="#indexOf-v-s-lastIndexOf" class="headerlink" title="indexOf v.s. lastIndexOf"></a>indexOf v.s. lastIndexOf</h2><p><strong>共同：</strong><br>搜尋條件「不可」放函式</p><p>皆返回元素索引值</p><p><strong>差異：</strong><br>indexOf返回「第一個」符合的元素索引值</p><p>lastIndexOf返回「最後一個」符合的元素索引值</p>]]></content>
    
    
    <summary type="html">JavaScript</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML-基本設置 and 快捷鍵</title>
    <link href="https://chocolin1226.github.io/2022/11/02/HTML_01/"/>
    <id>https://chocolin1226.github.io/2022/11/02/HTML_01/</id>
    <published>2022-11-02T08:33:15.000Z</published>
    <updated>2022-11-16T18:09:16.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下載-VScode-延伸模組"><a href="#下載-VScode-延伸模組" class="headerlink" title="下載 VScode 延伸模組"></a>下載 VScode 延伸模組</h2><p>Auto Rename Tag<br>Chinese Lorem<br>CSS Variable Autocomplete<br>IntelliSense for CSS class names in HTML<br>Live Preview<br>Live Server<br>Path Intellisense</p><h2 id="VScode-快捷設定"><a href="#VScode-快捷設定" class="headerlink" title="VScode 快捷設定"></a>VScode 快捷設定</h2><p>左下齒輪-Keyboard Shortcuts-zoom-(1)Editor Font Zoom in(Ctrl +) (2)Editor Font Zoom out(Ctrl -)<br>左下齒輪-Settings-(1)wrap-Editor:Word Wrap-on (2)emmettab-v<br>VScode 快捷鍵<br>Ctrl + n 開新檔<br>Ctrl + k 再 m 修改語言格式<br>div&gt;p 產生一個 div 包含 P 段落<br>div+p 產生一個 div 再產生一個 P 段落<br>p<em>10 產生 10 個段落<br>p&gt;lorem 產生一個包含假文段落<br>p</em>10&gt;lorem 產生 10 個包含假文段落<br>lorem10 產生 10 個字的假文<br>ctlorem 產生中文假文</p>]]></content>
    
    
    <summary type="html">HTML</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Git-開新專案 and 基本使用</title>
    <link href="https://chocolin1226.github.io/2022/11/01/Git_01/"/>
    <id>https://chocolin1226.github.io/2022/11/01/Git_01/</id>
    <published>2022-11-01T08:33:15.000Z</published>
    <updated>2022-11-16T18:09:08.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解釋"><a href="#解釋" class="headerlink" title="解釋"></a>解釋</h2><p>Git ：分散式的版本控制系統<br>集中式：集中上傳到同一地點，從同一地點下載<br>分散式：本地端可指定給任一個本地端<br>集中式缺點：集中的端點壞掉就全部不能用了。<br>Git 同時支援本地與遠端操作。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir git-demo #新增專案資料夾</span><br><span class="line">$ cd git-demo #轉到此資料夾內</span><br><span class="line">$ git init #初始化</span><br><span class="line">$ git status #查狀態</span><br><span class="line">$ git add xxx.xxx #將 xxx.xxx 加入暫存區</span><br><span class="line">$ git commit -m&quot;ooo&quot; #存入本地儲存庫，並將此次版本命名為 ooo</span><br></pre></td></tr></table></figure><h2 id="增加-VScode-延伸模組"><a href="#增加-VScode-延伸模組" class="headerlink" title="增加 VScode 延伸模組"></a>增加 VScode 延伸模組</h2><p>Git Graph<br>Remote Development<br>WSL</p>]]></content>
    
    
    <summary type="html">Git</summary>
    
    
    
    
  </entry>
  
</feed>
